defmodule Elgamal do
  alias Overridable.Strategy.SchnorrGroup
  use Overridable

  def precompiled_params do
    {29_246_215_846_204_023_845_661_436_515_786_276_073_486_835_998_043_377_979_631_821_632_980_373_750_373_506_716_935_108_709_134_150_315_077_178_552_610_759_352_994_450_090_572_266_636_685_616_451_716_391_952_072_833_795_499_789_131_322_575_530_238_198_544_770_771_617_812_528_646_303_905_917_492_584_447_154_662_948_641_712_427_231_595_887_624_271_569_099_499_387_610_128_556_741_712_624_068_243_750_281_520_519_949_182_649_075_438_036_823_072_517_878_426_092_867_241_795_800_130_191_610_794_573_381_222_808_407_883_560_316_642_970_265_529_357_080_376_652_939_151_109_907_537_374_096_728_644_980_071_001_096_474_793_001_881_222_517_786_329_647_511_175_007_471_543_252_608_216_261_600_765_429_417_439_990_405_044_178_473_587_096_054_028_464_645_779_943_480_676_406_168_210_568_183_361_339_187_159_268_254_938_820_353_157_679,
     14_623_107_923_102_011_922_830_718_257_893_138_036_743_417_999_021_688_989_815_910_816_490_186_875_186_753_358_467_554_354_567_075_157_538_589_276_305_379_676_497_225_045_286_133_318_342_808_225_858_195_976_036_416_897_749_894_565_661_287_765_119_099_272_385_385_808_906_264_323_151_952_958_746_292_223_577_331_474_320_856_213_615_797_943_812_135_784_549_749_693_805_064_278_370_856_312_034_121_875_140_760_259_974_591_324_537_719_018_411_536_258_939_213_046_433_620_897_900_065_095_805_397_286_690_611_404_203_941_780_158_321_485_132_764_678_540_188_326_469_575_554_953_768_687_048_364_322_490_035_500_548_237_396_500_940_611_258_893_164_823_755_587_503_735_771_626_304_108_130_800_382_714_708_719_995_202_522_089_236_793_548_027_014_232_322_889_971_740_338_203_084_105_284_091_680_669_593_579_634_127_469_410_176_578_839,
     2}
  end

  def params(params) do
    SchnorrGroup.new(params)
  end

  def gen_keys(g) do
    SchnorrGroup.random(g)
  end

  def encrypt(msg, pkey) do
    {lskey, lpkey} = gen_keys(pkey)
    key = pow(pkey, lskey)
    key = hash(key)
    ciphertext = :crypto.exor(pad(msg), key)
    {lpkey, ciphertext}
  end

  def decrypt({pkey, ciphertext}, skey) do
    key = pow(pkey, skey)
    key = hash(key)
    msg = :crypto.exor(ciphertext, key)
    unpad(msg)
  end

  def hash(msg) do
    msg = to_bin(msg)
    :crypto.hash(:sha512, msg)
  end

  def pad(msg) when byte_size(msg) <= 30 do
    pad_len = 64 - byte_size(msg) - 1
    <<pad_len>> <> :crypto.strong_rand_bytes(pad_len) <> msg
  end

  def unpad(<<pad_len::size(8), data::binary>>) do
    pad_len = pad_len * 8
    <<_::size(pad_len), msg::binary>> = data
    msg
  end
end
